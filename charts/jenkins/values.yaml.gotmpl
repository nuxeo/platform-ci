# See https://github.com/jenkinsci/helm-charts/blob/main/charts/jenkins/values.yaml.
controller:
  # Disable rendering controller test resources when using `helm template`.
  testEnabled: false
  image: jenkins/jenkins
  # Use a fixed version, instead of the `lts` moving tag, to avoid automatic upgrades when the pod is restarted.
  # This happens typically when the Kubernetes node pool is upgraded by GCP and is not wanted since there can be some
  # breaking changes in the Jenkins LTS image.
  tag: 2.319.2
  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "2"
      memory: "12Gi"
  containerEnv:
  - name: SECRETS
    value: /run/secrets/jenkins-casc
  # Among others, enable permissions for the extended-read-permission plugin.
  javaOpts: >
    -XX:MaxRAMFraction=1
    -Djenkins.install.runSetupWizard=false
    -Djava.awt.headless=true
    -Dhudson.security.ExtendedReadPermission=true
    -Djenkins.security.SystemReadPermission=true  
  probes:
    # Allow 3 minutes for the Jenkins startup.
    startupProbe:
      periodSeconds: 20
      failureThreshold: 10
  # Set to false to download the minimum required version of all dependencies.
  installLatestPlugins: true
  installPlugins:
  - configuration-as-code
  - git
  - job-dsl
  - kubernetes:1.30.3
  - kubernetes-client-api:5.4.1
  - kubernetes-credentials-provider:0.20
  - workflow-aggregator
  - workflow-job
  additionalPlugins:
  - blueocean
  - configuration-as-code-groovy
  - credentials
  - cucumber-reports
  - disable-github-multibranch-status
  - embeddable-build-status
  - extended-read-permission
  - github
  - github-checks
  - github-oauth
  - jira
  - jira-steps
  - lockable-resources
  - matrix-auth
  - parameterized-scheduler
  - pipeline-github
  - pipeline-utility-steps
  - rebuild
  - slack
  - text-finder
  - timestamper
  - warnings-ng
  # Always override the installed plugins with the values of 'controller.installPlugins' on upgrade or redeployment.
  overwritePlugins: true
  scriptApproval:
  - "method java.time.DayOfWeek getValue"
  - "method java.time.temporal.TemporalUnit between java.time.temporal.Temporal java.time.temporal.Temporal"
  - "method java.util.Properties getProperty java.lang.String"
  - "staticField java.time.temporal.ChronoUnit DAYS"
  - "staticMethod hudson.Functions printThrowable java.lang.Throwable"
  - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods find java.lang.Object groovy.lang.Closure"
  initScripts:
  # Set custom agent pod labels.
  - |
    import jenkins.model.*;
    import org.csanchez.jenkins.plugins.kubernetes.*;

    if (!Jenkins.instance.clouds) {
        return;
    };
    def kubernetesCloud = Jenkins.instance.clouds.get(0);

    def podLabels = kubernetesCloud.getPodLabels();
    def customLabels = [new PodLabel('team', 'platform'), new PodLabel('resource', 'pod'), new PodLabel('usage', 'build')];
    if (customLabels.disjoint(podLabels)) {
      kubernetesCloud.setPodLabels(customLabels);
    }
  JCasC:
    securityRealm: |-
      github:
        githubWebUri: "https://github.com"
        githubApiUri: "https://api.github.com"
        clientID: "${gitHubOAuthClientId}"
        clientSecret: "${gitHubOAuthSecret}"
        oauthScopes: "read:org,user:email,repo"
    authorizationStrategy: |-
      globalMatrix:
        permissions:
        - "GROUP:Credentials/View:nuxeo*Developers"
        - "GROUP:Job/Build:nuxeo*Developers"
        - "GROUP:Job/Cancel:nuxeo*Developers"
        - "GROUP:Job/Discover:nuxeo*Developers"
        - "GROUP:Job/ExtendedRead:nuxeo*Developers"
        - "GROUP:Job/Read:nuxeo*Developers"
        - "GROUP:Job/ViewStatus:authenticated"
        - "GROUP:Job/Workspace:nuxeo*Developers"
        - "GROUP:Lockable Resources/View:nuxeo*Developers"
        - "GROUP:Metrics/HealthCheck:nuxeo*Developers"
        - "GROUP:Metrics/ThreadDump:nuxeo*Developers"
        - "GROUP:Metrics/View:nuxeo*Developers"
        - "GROUP:Overall/Administer:nuxeo*platform"
        - "GROUP:Overall/Read:nuxeo*Developers"
        - "GROUP:Overall/SystemRead:nuxeo*Developers"
        - "GROUP:Run/Replay:nuxeo*Developers"
        - "GROUP:Run/Update:nuxeo*Developers"
        - "GROUP:View/Read:nuxeo*Developers"
        - "USER:Job/ViewStatus:anonymous"
  nodeSelector:
    team: platform
  tolerations:
  - key: team
    operator: Equal
    value: platform
    effect: NoSchedule
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hostName: jenkins.{{ .Values.namespace }}.dev.nuxeo.com
    tls:
    - hosts:
      - jenkins.{{ .Values.namespace }}.dev.nuxeo.com
      secretName: {{ .Values.namespace }}-tls
# Secrets made available in `JCasC` through `${SECRET_KEY_NAME}`, requires an existing `jenkins-casc` secret.
persistence:
  size: "30Gi"
  volumes:
  - name: jenkins-casc-secrets
    secret:
      secretName: jenkins-casc
  mounts:
  - name: jenkins-casc-secrets
    mountPath: /run/secrets/jenkins-casc
    readOnly: true
