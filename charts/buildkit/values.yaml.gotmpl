namespace: {{ .Values.namespace }}
annotations:
  ad.datadoghq.com/buildkitd.logs: '[{"service":"skaffold-builder"}]'
  ad.datadoghq.com/tags: '{"service":"skaffold-builder"}'
  buildx.docker.com/platform: linux/amd64,linux/arm64
  dev.nuxeo.com/initiator: 'jenkins-{{ .Values.namespace }}'
  dev.nuxeo.com/repository: platform-ci
  dev.nuxeo.com/team: platform
strategy:
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
  type: RollingUpdate
buildkitd:
  image:
    repository: moby/buildkit
    tag: buildx-stable-1
    pullPolicy: Always
  readinessProbe:
    command:
    - buildctl
    - debug
    - workers
    initialDelaySeconds: 5
    failureThreshold: 2
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  livenessProbe:
    exec:
      command:
      - buildctl
      - debug
      - workers
    initialDelaySeconds: 5
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  resources:
    requests:
      cpu: "2"
      memory: "16Gi"
    limits:
      memory: "16Gi"
  securityContext:
    privileged: true
qemu:
  image:
    repository: tonistiigi/binfmt
    tag: latest
    pullPolicy: Always
  args:
  - --install
  - all
  resources: {}
  securityContext:
    privileged: true
nodeSelector:
  team: platform
tolerations:
- key: team
  operator: Equal
  value: platform
  effect: NoSchedule
config:
  buildkitd: |-
    # debug enables additional debug logging
    # debug = true
    # trace enables additional trace logging (very verbose, with potential performance impacts)
    # trace = true

    [log]
      # log formatter: json or text
      format = "json"
    
    # config for build history API that stores information about completed build commands
    [history]
      # maxAge is the maximum age of history entries to keep, in seconds.
      maxAge = 21600
      # maxEntries is the maximum number of history entries to keep.
      maxEntries = 10

    [worker.oci]
      enabled = true
      gc = true
      gckeepstorage = "10GB"

      # limit the number of parallel build steps that can run at the same time
      max-parallelism = 4

      # configure GC policies
      # policy inspired from https://docs.docker.com/build/buildkit/toml-configuration/
      [[worker.oci.gcpolicy]]
        # keepBytes can be an integer number of bytes (e.g. 512000000), a string
        # with a unit (e.g. "512MB"), or a string percentage of the total disk
        # space (e.g. "10%")
        keepBytes = "2GB"
        # keepDuration can be an integer number of seconds (e.g. 172800), or a
        # string duration (e.g. "48h")
        keepDuration = "12h"
        filters = [ "type==source.local", "type==exec.cachemount", "type==source.git.checkout"]

      [[worker.oci.gcpolicy]]
        all = false
        keepBytes = "2GB"
        keepDuration = "24h"
    
      [[worker.oci.gcpolicy]]
        all = false
        keepBytes = "10GB"
        
      [[worker.oci.gcpolicy]]
        all = true
        keepBytes = "10GB"

horizontalPodAutoscaler:
  minReplicas: {{ .Values.buildKit.hpa.minReplicas }}
  maxReplicas: {{ .Values.buildKit.hpa.maxReplicas }}
  metrics:
    cpu:
      # sample use case: currentReplicas = 1, currentMetricValue = 300 (observed regularly at Docker build start)
      # desiredReplicas = 1 X 300 / 150 = 2, sounds good to add 1 replica in this case
      averageUtilization: 150
    memory:
      averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 3600
      policies:
      - type: Pods
        value: 1
        periodSeconds: 900
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Pods
        value: 1
        periodSeconds: 300
